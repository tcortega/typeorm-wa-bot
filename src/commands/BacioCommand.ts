import { Message } from "@open-wa/wa-automate";
import { DefineCommand } from "../decorators/DefineCommand";
import { BacioApi } from "../libs/BacioApi";
import BaseCommand from "../libs/BaseCommand";

@DefineCommand("bacio", {
  aliases: ["sv", "sorvete"],
  minimumArgs: 1,
})
export default class extends BaseCommand {
  public async exec(msg: Message, args: string[]) {
    const cpf = /\d/.test(args[args.length - 1]) ? args.pop() : "";

    if (args.length == 0) {
      return await this.client.reply(msg.chatId, "Voc√™ tem que enviar seu nome tamb√©m n√© porra.", msg.id);
    }

    const name = args.join(" ");

    const bacioApi = new BacioApi(name, cpf);
    this.processing(msg, "*Processando...* _Obs.: Pode demorar at√© mais de 30 segundos porque a bacio √© muito lerda._");

    for (let i = 0; i < 3; i++) {
      try {
        const wallet = await bacioApi.create();

        const replyMsg = `üç® *Gelato gratis gerado com sucesso!*
üë§ Nome: ${wallet.name}
üóÉÔ∏è CPF: ${wallet.cpf} 
üîë PIN: ${wallet.pin}

‚ÑπÔ∏è *Dica: Memorize o CPF pois a filha da puta pode te recusar o gelato se achar que o cpf n√£o √© seu.*
üìé Link da carteira: ${wallet.url}`;

        return await this.client.reply(msg.chatId, replyMsg, msg.id);
      } catch {}
    }

    return await this.client.reply(msg.chatId, "N√£o consegui gerar porque a API da bacio √© uma merda :(. Tenta o comando de novo!", msg.id);
  }
}
